/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.agh.reactive;
import akka.Done;
import akka.NotUsed;
import akka.actor.typed.ActorSystem;
import akka.actor.typed.javadsl.Behaviors;
import akka.stream.*;
import akka.stream.javadsl.*;
import edu.agh.reactive.greetings.GreeterMain;
import edu.agh.reactive.hello.HelloActor;
import edu.agh.reactive.math.MathActor;


import java.io.IOException;
import java.util.concurrent.CompletionStage;


public class App {
    public static void main(String[] args) {
        //////////////////////////////
        // TASK 0- uncomment code lines + also in try-catch section (grretings)
        //#actor-system
        System.out.println("========== TAKS 0 ==========");
        final ActorSystem<GreeterMain.SayHello> greeterMain = ActorSystem.create(GreeterMain.create(), "akka-lab");
        //#actor-system

        //#main-send-messages
        greeterMain.tell(new GreeterMain.SayHello("Some-test"));
        //#main-send-messages

        //TASK 1 - hello
        // create actor system

        final ActorSystem<String> helloSystem =
                ActorSystem.create(HelloActor.create(), "helloActor");

        // send messages
        helloSystem.tell("hello world");


        //TASK 2 - math operations
        System.out.println("========== TAKS 1 ==========");

        final ActorSystem<MathActor.MathCommand> mathContext =
                ActorSystem.create(MathActor.create(), "actorMath");
        System.out.println("math main: actor system ready");

        // send messages
        mathContext.tell(new MathActor.MathCommandAdd(5, 3));
        mathContext.tell(new MathActor.MathCommandMultiply(5, 3, null));
        mathContext.tell(new MathActor.MathCommandMultiply(5, 2, null));
        mathContext.tell(new MathActor.MathCommandDivide(15, 3, null));
        mathContext.tell(new MathActor.MathCommandDivide(15, 5, null));

        mathContext.tell(new MathActor.MathCommandDivide(15, 0, null));
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
//
        System.out.println("Math main: sending second package of messages");
        mathContext.tell(new MathActor.MathCommandMultiply(5, 3, null));
        mathContext.tell(new MathActor.MathCommandMultiply(5, 2, null));
        mathContext.tell(new MathActor.MathCommandDivide(15, 3, null));
        mathContext.tell(new MathActor.MathCommandDivide(15, 5, null));
        System.out.println("Math main: messages send");

        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("========== TAKS 2 ==========");


        final ActorSystem<Object> streamSystem = ActorSystem.create(Behaviors.empty(), "streams");
        final Materializer materializer = Materializer.createMaterializer(streamSystem);
        // case 1
        final Source<Integer, NotUsed> in = Source.range(1, 100);
        final Flow<Integer, String, NotUsed> flow = Flow.fromFunction(Object::toString);
        final Sink<String, CompletionStage<Done>> sink = Sink.foreach(System.out::println);
        final RunnableGraph<NotUsed> runnableGraph = in.via(flow).to(sink);
        runnableGraph.run(materializer);

        System.out.println("========== TAKS 3 ==========");

        // task 4 - graph dsl
        // how to create
        // step 1 - frame
        /*final Graph<ClosedShape, CompletionStage<Done>> specialGraph = GraphDSL.create(sink , (builder, out)-> {
            //step 2 - building blocks
            final Outlet<Integer> source = builder.add(in).out();
            builder.from(source).via(builder.add(flow)).to(out);
            // step 3 - glue components
            // step 4 closing
            return ClosedShape.getInstance();
            });

        RunnableGraph.fromGraph(specialGraph).run(materializer);

        try {
            System.out.println(">>> Press ENTER to exit <<<");
            System.in.read();
        } catch (IOException ignored) {
        } finally {
            greeterMain.terminate();
            mathContext.terminate();
            helloSystem.terminate();
            //streamSystem.terminate();
        }
*/

    }

}


